using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;

namespace Snake
{
    public class Game1 : Game
    {
        private GraphicsDeviceManager _graphics;
        private SpriteBatch _spriteBatch;

        //Red square
        Texture2D redSquare_Texture;
        Vector2 redSquare_Position;
        float redSquare_Speed;

        //Black Square
        Texture2D blackSquare_Texture;
        Vector2 blackSquare_Position = new Vector2(200, 300);

        //Font
        SpriteFont gameFont;

        //Score
        int score = 0;
        string scoreText = "Score:";

        public Game1()
        {
            _graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            IsMouseVisible = true;
        }

        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            //_graphics.PreferredBackBufferWidth = GraphicsDevice.Adapter.CurrentDisplayMode.Width;
            //_graphics.PreferredBackBufferHeight = GraphicsDevice.Adapter.CurrentDisplayMode.Height;
            //_graphics.IsFullScreen = true;
            //_graphics.ApplyChanges();

            redSquare_Position = new Vector2(_graphics.PreferredBackBufferWidth / 2, _graphics.PreferredBackBufferHeight / 2);
            redSquare_Speed = 5f;


            base.Initialize();
        }

        protected override void LoadContent()
        {
            _spriteBatch = new SpriteBatch(GraphicsDevice);

            redSquare_Texture = Content.Load<Texture2D>("Red square 5");
            blackSquare_Texture = Content.Load<Texture2D>("Black  square");
            gameFont = Content.Load<SpriteFont>("galleryFont");

            // TODO: use this.Content to load your game content here
        }

        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();

            //Player input
            var kstate = Keyboard.GetState();

            if (kstate.IsKeyDown(Keys.W))
            {
                redSquare_Position.Y -= redSquare_Speed;
            }
            if (kstate.IsKeyDown(Keys.A))
            {
                redSquare_Position.X -= redSquare_Speed;
            }
            if (kstate.IsKeyDown(Keys.S))
            {
                redSquare_Position.Y += redSquare_Speed;
            }
            if (kstate.IsKeyDown(Keys.D))
            {
                redSquare_Position.X += redSquare_Speed;
            }

            //Screen border
            if (redSquare_Position.X <= redSquare_Texture.Width / 2)
            {
                redSquare_Position.X = 0 + redSquare_Texture.Width / 2;
            }
            else if (redSquare_Position.X >= _graphics.PreferredBackBufferWidth - redSquare_Texture.Width / 2)
            {
                redSquare_Position.X = _graphics.PreferredBackBufferWidth - redSquare_Texture.Width / 2;
            }


            if (redSquare_Position.Y <= redSquare_Texture.Width / 2)
            {
                redSquare_Position.Y = 0 + redSquare_Texture.Height / 2;
            }
            else if (redSquare_Position.Y >= _graphics.PreferredBackBufferHeight - redSquare_Texture.Height / 2)
            {
                redSquare_Position.Y = _graphics.PreferredBackBufferHeight - redSquare_Texture.Height / 2;
            }

            //Game
            float squareDist = Vector2.Distance(blackSquare_Position, redSquare_Position);

            if (squareDist < blackSquare_Texture.Width)
            {
                score++;

                Random rand = new Random();

                blackSquare_Position = new Vector2
                    (rand.Next(0 + blackSquare_Texture.Width / 2, _graphics.PreferredBackBufferWidth - blackSquare_Texture.Width / 2),
                    rand.Next(0 + blackSquare_Texture.Height / 2, _graphics.PreferredBackBufferHeight - blackSquare_Texture.Height / 2));

            }

            base.Update(gameTime);
        }

        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            //Draw red square
            _spriteBatch.Begin();
            _spriteBatch.DrawString(gameFont, scoreText, new Vector2(50, 50), Color.White);
            _spriteBatch.DrawString(gameFont, score.ToString(), new Vector2(150, 50), Color.White);
            _spriteBatch.Draw(blackSquare_Texture, blackSquare_Position, null, Color.White, 0f, new Vector2(blackSquare_Texture.Width / 2, blackSquare_Texture.Height / 2), Vector2.One, SpriteEffects.None, 0f);
            _spriteBatch.Draw(redSquare_Texture, redSquare_Position, null, Color.White, 0f, new Vector2(redSquare_Texture.Width / 2, redSquare_Texture.Height / 2), Vector2.One, SpriteEffects.None, 0f);
            _spriteBatch.End();

            // TODO: Add your drawing code here

            base.Draw(gameTime);
        }
    }
}
